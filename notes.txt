a) Compared with the original, I didnt include:
      "sourceType": "module",
      in eslintrc.js

b) I have removed:

    "babel-core": "^6.26.3",
    "babel-preset-env": "^1.7.0",
    "babel-register": "^6.26.0",

    and replaced with:

    "@babel/core": "^7.4.3",
    "@babel/preset-env": "^7.4.3",
    "@babel/register": "^7.4.0",

BOOTSTRAP
  Bootstrap is loaded locally by npm install to node_modules. So we can point url to node_modules/pathtobootstrap:
  Bootstrap css (in the head before your style.css)
  Bootstrap JS + Popper & tether (needed for some Bootstrap features) (in the body at the end after JQuery link)

  for production change to CDN links

PROCESS
1. Fill the project data in package.json. (npm init also generates package.json)
  Choose the dependencies you need (eg jQuery)
  (For Bootstrap, remove main.css & normalize.css - Bootstrap uses its own Reset)

2. Run npm install to install those dependencies in node_modules. (npm install ... --save or --save-dev will always
enable you to add more dependencies on the fly)

3. Remove zzz-style-test.js & zzz-js-test.js from the root folder after making sure prettier and eslint are working.
EsLint uses prettier - it is configured in eslintrc.js. this file also defines ecmaVersion": 2018, parser": "babel-eslint",
"env": "browser"  "node", etc. Eslint deals with JS syntax, prettier with style.

4. Babel is a JavaScript compiler, mainly used to convert ECMAScript 2015+ (ES6+) code
into a backwards compatible version of JavaScript. Webpack will use Babel - it is configured in webpack.config.js:
loader: "babel-loader", presets: ["@babel/preset-env"].
    (Optinally we could add .babelrc with { "presets": ["@babel/preset-env"] }, and in package.json "scripts":
    { "babel": "babel src -d lib"} to see code compile to ES5 in lib/[name],js when npm run babel).
Except IE most modern browsers support all ES2015 features (eg templates, import). In dist/[name].js(created effectively
by webpack) you'll find the lines of transpiled code.

5. In webpack.config.js we tell webpack the entry point "./src/js/main.js" & pluginsPage: "./src/js/plugins.js".
We define where transpiled output page should be dist/js/[name].js. We tell which folders to exclude.
So Babel transpiled to ES5, webpack will browserify the server-side JS(eg require ('commonJS module') to browser-copatible JS.
npx webpack --mode=development (human readable)
will produce SINGLE dist/js/[name].js (without require statements)
(more on this in webpack-test project on babel.html & index. html)


VALIDATION

https://validator.w3.org/nu/

http://jigsaw.w3.org/css-validator/
Audit in Dev Tools



NOTES ON FOLDERS:
src/: This is where the original source files are located,
before being compiled into fewer files to dist/, public/ or build/.

dist/: the compiled code/library, also named public/ or build/ target/
The files meant for production or public use are usually located here.
A directory where files will be stored that can be directly used by others
without the need to compile or minify the source code that is being reused.
f you want to distribute a JavaScript library, it's advisable to put the plain (not minified) source code
into a src (source) directory and the minified and obfuscated version into the dist (distributable) directoy,
so others can grab the minified version right away without having to minify it themselves.

lib/: external dependencies (when included directly).

node_modules/: includes libraries and dependencies for JS packages, used by Npm.
vendor/: includes libraries and dependencies for PHP packages, used by Composer.
bin/: files that get added to your PATH when installed.

-------------
"use strict";
Modules are expected to execute in strict mode.

------------
<!--[if (gte IE 6)&(lte IE 8)]>
      <script type="text/javascript" src="selectivizr-min.js"></script>
    <![endif]-->

<!--[if lte IE 8]>
  <script src="ie-fix.js"></script>
  <link href="ie-fix.css" rel="stylesheet" type="text/css">
<![endif]-->
"less than or equal to"
-------------
CSS prefixes — these are a mechanism orignally used to allow browser vendors to implement their own version
of a CSS (or JavaScript) feature while the technology is in an experimental state, so they can play with it
and get it right without conflicting with other browser's implementations, or the final unprefixed implementations.

Prefixed features were never supposed to be used in production websites — they are subject to change or removal
without warning, and cause cross browser issues.

This is particularly a problem when developers decide to only use say, the -webkit- version of a property —
meaning that the site won't work in other browsers. This actually happens so much that other browsers have \
started to implement -webkit- prefixed versions of various CSS properties, so they will work with such code.
Usage of prefixes by browser vendors has declined recently precisely because of these types of problems,
but there are still some that need attention.
--------------



USEFUL LINKS:

https://themestr.app/theme

https://developer.mozilla.org/en-US/docs/Learn/CSS/Styling_text/Web_fonts

https://www.fontsquirrel.com/fonts/list/language/polish

https://www.fontsquirrel.com/tools/webfont-generator

https://google-webfonts-helper.herokuapp.com/fonts - download font locally tool

https://css-tricks.com/snippets/css/using-font-face/

https://developers.google.com/fonts/docs/getting_started

https://cssnewbie.com/10-beautiful-css-text-effects/#.XMhe7NszaR0

https://developers.google.com/fonts/faq

http://font-combinator.com/

https://fontpair.co/



https://everythingfonts.com/subsetter

https://meowni.ca/font-style-matcher/

https://blog.logrocket.com/how-to-use-web-fonts-in-css-a0326f4d6a4d

https://blog.hubspot.com/marketing/call-to-action-examples

https://uxplanet.org/how-to-customize-bootstrap-b8078a011203

https://onlinepngtools.com/create-transparent-png

https://www.fontsquirrel.com/fonts/list/language/polish


-------------

https://hacks.mozilla.org/2016/07/make-the-web-work-for-everyone/

http://gs.statcounter.com/browser-market-share/all/poland

https://www.javascripting.com/helpers/cross-browser/?sort=rating

https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills

http://diveinto.html5doctor.com/peeks-pokes-and-pointers.html

http://diveinto.html5doctor.com/table-of-contents.html
